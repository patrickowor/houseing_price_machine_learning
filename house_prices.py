# -*- coding: utf-8 -*-
"""house prices.ipynb

Automatically generated by Colaboratory.
"""

#importing the necessary modules for data manipulation
import pandas as pd
import numpy as np
import seaborn as sns

import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# reading the dataset

df = pd.read_csv("https://canvas.wlv.ac.uk/courses/41905/files/6902585/download?download_frd=1&verifier=M0hRcs3OSSM5NDnjXfoEcjJWSUvwHUGiNKXXtfHv")
df.head()

# getting sum of empty rows in dataset

print(df.isna().sum())

# while none exist i will stll drop na rows for safety reasons

df = df.dropna()

# checking for duplicate on the dataset
df.duplicated()

# getting the info of the dataset

df.info()

# getting final description of the data
df.describe()

# displaying graph of the whole dataset
df.plot()
plt.show()

# while using price as the dependent variable ploting all other columns against it

cols = list(df.columns)
cols.remove('price')

for col in cols:
  df.plot(kind = 'scatter', x = col, y = 'price')
plt.tight_layout()
plt.show()

import seaborn as sns
plt.figure(figsize=(12, 6))
sns.heatmap(df.corr(),
            cmap = 'BrBG',
            fmt = '.2f',
            linewidths = 2,
            annot = True)

df.columns

# dropping colums that have little relationship to no influence on the price

cleaned_dataset = df.drop([  'zipcode', 'lat', 'long', 'yr_renovated'], axis=1)
# cleaned_dataset = cleaned_dataset.drop([ 'view','waterfront','floors','condition',  ], axis=1)
cleaned_dataset

X =  cleaned_dataset.drop([ 'price'], axis=1)
y = cleaned_dataset['price']
y.head()

X.head()

#splitting data to training and testing dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# training the linear model
model = LinearRegression()
model.fit(X_train.values, y_train.values)

model.score(X_test.values, y_test.values)

y_pred = model.predict(X_test.values)

X_test

plt.scatter(X_test.sqft_living[:100], y_test[:100], label='Actual Prices')
plt.scatter(X_test.sqft_living[:100], y_pred[:100], color='red', label='Predicted Prices')

# Add labels and title
plt.xlabel("Actual price values")
plt.ylabel("Predicted price values")
plt.title("Scatter plot of actual vs. predicted price values for sqft_living")

# Show the plot
plt.show()

plt.scatter(X_test.bedrooms[:100], y_test[:100], label='Actual Prices')
plt.scatter(X_test.bedrooms[:100], y_pred[:100], color='red', label='Predicted Prices')

# Add labels and title
plt.xlabel("Actual price values")
plt.ylabel("Predicted price values")
plt.title(" Scatter plot of actual vs. predicted price values for bedrooms")

# Show the plot
plt.show()

#display regression coefficients and R-squared value of model
print(model.intercept_, model.coef_)